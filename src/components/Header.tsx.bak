import React, { useEffect, useState } from 'react';
import { Menu, X, Code2 } from 'lucide-react';
import { motion, AnimatePresence } from 'framer-motion';
import { Link, useLocation } from 'react-router-dom';

const Header = () => {
  const location = useLocation();
  const isHomePage = location.pathname === '/';

  const scrollToSection = (e: React.MouseEvent<HTMLAnchorElement>, sectionId: string) => {
    e.preventDefault();
    if (isHomePage) {
      const element = document.getElementById(sectionId);
      if (element) {
        element.scrollIntoView({ behavior: 'smooth' });
        setIsMenuOpen(false); // Close menu after scroll
      }
    }
  };

  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [scrolled, setScrolled] = useState(false);
  const [activeSection, setActiveSection] = useState('home');

  useEffect(() => {
    const handleScroll = () => {
      setScrolled(window.scrollY > 50);
  
      // Update active section based on scroll position
      const sections = document.querySelectorAll('section[id]');
      let currentSection = '';
      const scrollPosition = window.scrollY + window.innerHeight / 3; // 1/3 down from the viewport
  
      sections.forEach(section => {
        const { top, bottom } = section.getBoundingClientRect();
  
        // Offset for earlier trigger (100px before reaching the section)
        const sectionTop = top + window.scrollY - 100; // Adjust for earlier trigger
        const sectionBottom = bottom + window.scrollY;
  
        // Check if the scroll position is within the section bounds
        if (scrollPosition >= sectionTop && scrollPosition <= sectionBottom) {
          currentSection = section.id;
        }
      });
  
      // Update the active section if it changes
      if (currentSection !== activeSection && currentSection !== '') {
        setActiveSection(currentSection);
      }
    };
  
    window.addEventListener('scroll', handleScroll);
  
    // Clean up the event listener on unmount
    return () => window.removeEventListener('scroll', handleScroll);
  }, [activeSection]); // Dependency on activeSection ensures it re-runs on changes// Dependency on activeSection ensures it re-runs on changes

  const pageLinks = {
    'Home': '/',
    'About Us': '/about'
  };

  const navItems = isHomePage
    ? ['Home', 'About Us', 'Services', 'Staffing Solutions', 'Our Process', 'Contact Us']
    : ['Home', 'About Us', 'Services', 'Contact Us'];

  return (
    <motion.header
      initial={{ y: -100 }}
      animate={{ y: 0 }}
      transition={{ duration: 0.6, ease: 'easeOut' }}
      className={`fixed w-full z-50 transition-all duration-300 ${
        scrolled 
          ? 'bg-white/95 backdrop-blur-md shadow-lg py-2' 
          : 'bg-transparent py-4'
      }`}
    >
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex justify-between items-center">
          <Link to="/">
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ duration: 0.6 }}
              className="flex items-center"
            >
              <div className="relative">
                <Code2 className="h-8 w-8 text-blue-600 relative z-10" />
                <motion.div
                  animate={{
                    scale: [1, 1.2, 1],
                    rotate: [0, 180, 360],
                  }}
                  transition={{
                    duration: 3,
                    repeat: Infinity,
                    ease: "linear"
                  }}
                  className="absolute inset-0 bg-blue-200 rounded-full opacity-20"
                />
              </div>
              <span className="ml-2 text-2xl font-bold bg-gradient-to-r from-blue-600 to-blue-400 bg-clip-text text-transparent">
                Sayge
              </span>
            </motion.div>
          </Link>

          <nav className="hidden md:flex space-x-8" role="navigation">
            {navItems.map((item, index) => {
              const itemId = item.toLowerCase().replace(/\s+/g, '-');
              const isActive = activeSection === itemId;

              return (
                <motion.a
                  key={item}
                  initial={{ opacity: 0, y: -20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.3, delay: index * 0.1 }}
                  href={`#${itemId}`}
                  onClick={(e) => scrollToSection(e, itemId)}
                  className={`relative text-gray-700 hover:text-blue-600 transition-all duration-300 py-2 group ${
                    isActive ? 'text-blue-600' : ''
                  }`}
                >
                  {item}
                  <motion.span
                    initial={false}
                    animate={{
                      width: isActive ? '100%' : '0%',
                      opacity: isActive ? 1 : 0,
                    }}
                    className="absolute bottom-0 left-0 h-0.5 bg-blue-600 group-hover:w-full group-hover:opacity-100 transition-all duration-300"
                  />
                </motion.a>
              );
            })}
          </nav>

          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            className="hidden md:flex items-center space-x-2 bg-gradient-to-r from-blue-600 via-blue-500 to-blue-600 bg-size-200 bg-pos-0 hover:bg-pos-100 text-white px-6 py-2.5 rounded-full transition-all duration-500 shadow-lg hover:shadow-blue-500/25"
          >
            <span>Get in Touch</span>
            <motion.span
              animate={{ x: [0, 5, 0] }}
              transition={{ duration: 1.5, repeat: Infinity }}
            >
              â†’
            </motion.span>
          </motion.button>

          <button
            aria-label="Toggle menu"
            aria-expanded={isMenuOpen ? 'true' : 'false'}
            className="md:hidden relative z-50"
            onClick={() => setIsMenuOpen(!isMenuOpen)}
          >
            <AnimatePresence mode="wait">
              {isMenuOpen ? (
                <motion.div
                  key="close"
                  initial={{ rotate: -90 }}
                  animate={{ rotate: 0 }}
                  exit={{ rotate: 90 }}
                  transition={{ duration: 0.2 }}
                >
                  <X className="h-6 w-6" />
                </motion.div>
              ) : (
                <motion.div
                  key="menu"
                  initial={{ rotate: 90 }}
                  animate={{ rotate: 0 }}
                  exit={{ rotate: -90 }}
                  transition={{ duration: 0.2 }}
                >
                  <Menu className="h-6 w-6" />
                </motion.div>
              )}
            </AnimatePresence>
          </button>
        </div>
      </div>

      <AnimatePresence>
        {isMenuOpen && (
          <motion.div
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: 'auto' }}
            exit={{ opacity: 0, height: 0 }}
            transition={{ duration: 0.3 }}
            className="fixed inset-0 bg-white/95 backdrop-blur-lg md:hidden pt-20"
          >
            <div className="container mx-auto px-4 py-8">
              {navItems.map((item, index) => (
                <motion.a
                  key={item}
                  initial={{ x: -50, opacity: 0 }}
                  animate={{ x: 0, opacity: 1 }}
                  transition={{ delay: index * 0.1 }}
                  href={`#${item.toLowerCase().replace(/\s+/g, '-')}`}
                  className="block py-4 text-lg font-medium text-gray-800 hover:text-blue-600 transition-colors border-b border-gray-100"
                  onClick={(e) => scrollToSection(e, item.toLowerCase().replace(/\s+/g, '-'))}
                >
                  {item}
                </motion.a>
              ))}
              <motion.button
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                transition={{ delay: 0.3 }}
                className="w-full mt-8 bg-gradient-to-r from-blue-600 to-blue-500 text-white px-6 py-3 rounded-full"
              >
                Get in Touch
              </motion.button>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </motion.header>
  );
};

export default Header;